# Node Github Relase steps
# Mark a release on the project repository, with version bump and tag,
# and publish a release on Github

parameters:
  # Versioning parameters
  - name: 'semver'
    type: string
    values:
    - major
    - minor
    - patch

  # This is the branch in which we will push the release tag.
  # It'll be master, but it can be overridden
  # Basically, this variable is used to enforce the fact that we use the very same branch in different steps
  - name: 'release_branch'
    type: string
    default: main

  # This is the project folder where yarn.lock is present
  # (in case of multiple project under the same repo)
  - name: 'project_folder'
    type: string
    default: '.'

  # Github parameters
  - name: 'gitUsername'
    type: string
  - name: 'gitEmail'
    type: string
  - name: 'gitHubConnection'
    type: string

  # Node runtime parameters
  - name: 'nodeVersion'
    type: string
  - name: 'pkg_cache_version_id'
    type: string
  - name: 'pkg_cache_folder'
    type: string


steps:
  - checkout: self
    displayName: 'Checkout'
    clean: true
    persistCredentials: true

  # setup git author
  - script: |
      git config --global user.email "${{ parameters.gitEmail }}" && git config --global user.name "${{ parameters.gitUsername }}"
    displayName: 'Git setup' 

  # Without this step, changes would be applied to a detached head
  - script: |
      git checkout ${{ parameters.release_branch }}
    displayName: 'Checkout release branch'

  # Go to project folder (in case of multiple project under the same repo)
  - script: |
      cd ${{ parameters.project_folder }}
    displayName: "Go to project folder"
        
  # setup Node runtime
  - task: UseNode@1
    inputs:
      version: '${{ parameters.nodeVersion }}'
    displayName: 'Set up Node.js'
  - task: Cache@2
    inputs:
      key: 'yarn-${{ parameters.pkg_cache_version_id }} | "$(Agent.OS)" | ${{ parameters.project_folder }}/yarn.lock'
      restoreKeys: |
        yarn-${{ parameters.pkg_cache_version_id }} | "$(Agent.OS)"
      path: '${{ parameters.pkg_cache_folder }}'
    displayName: 'Cache yarn packages'
  - script: |
      yarn --cwd ${{ parameters.project_folder }} install --frozen-lockfile --no-progress --non-interactive --network-concurrency 1
    displayName: 'Install node modules'
    condition: ne(variables.CACHE_RESTORED, 'true')
    
  # bump version
  - script: |
      npm --prefix ${{ parameters.project_folder }} version ${{ parameters.semver }} -m "Bump version to %s [skip ci]"
      NEXT_VERSION=$(node -p "require('./${{ parameters.project_folder }}/package.json').version")
      RELEASE_TAG="be/v$NEXT_VERSION-RELEASE"
      echo $RELEASE_TAG
      git tag $RELEASE_TAG
    displayName: 'Version bump and tag'
  - script: |
      NEXT_VERSION=$(node -p "require('./${{ parameters.project_folder }}/package.json').version")
      HEAD_SHA=$(git rev-parse HEAD)
      TITLE="Release $NEXT_VERSION"
      TAG="be/v$NEXT_VERSION-RELEASE"
      echo "##vso[task.setvariable variable=title]$TITLE"
      echo "##vso[task.setvariable variable=sha]$HEAD_SHA"
      echo "##vso[task.setvariable variable=tag]$TAG"
    displayName: 'Set release variables'

  # push new version
  - script: |
      git push origin ${{ parameters.release_branch }} && git push --tags
    displayName: 'Push to the release branch'

  # create new releae
  - task: GitHubRelease@0
    inputs:
      gitHubConnection: ${{ parameters.gitHubConnection }}
      repositoryName: $(Build.Repository.Name)
      action: create
      target: $(sha)
      tagSource: manual
      tag: $(tag)
      title: $(title)
      addChangelog: true
