# Azure DevOps pipeline to release a new version and deploy to production.

parameters:
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: minor

# Only manual activations are intended
trigger: none
pr: none

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image for
# the build and deploy.
pool:
  vmImage: 'windows-2019'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v18
      endpoint: 'io-azure-devops-github-ro'

stages:

  # Create a relase
  # Activated when ONE OF these are met:
  # - is on branch main 
  # - is a tag in the form v{version}-RELEASE
  - stage: Release
    # condition:
    #   and(
    #     succeeded(),
    #     or(
    #       eq(variables['Build.SourceBranch'], 'refs/heads/main'),
    #       and(
    #         startsWith(variables['Build.SourceBranch'], 'refs/tags'),
    #         endsWith(variables['Build.SourceBranch'], '-RELEASE')
    #       )
    #     )
    #   )
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: make_release
        steps:
        - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              persistCredentials: true
              gitReference: 'main'
          - template: templates/node-github-release/template.yaml@pagopaCommons
            parameters:
              release_branch: 'main'
              semver: '${{ parameters.RELEASE_SEMVER }}'
              gitEmail: $(GIT_EMAIL)
              gitUsername: $(GIT_USERNAME)
              gitHubConnection: $(GITHUB_CONNECTION)

        - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/main') }}:
          - script: |
              echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
            displayName: 'Skip release bundle'
  # Prepare Artifact
  - stage: Prepare_artifact
    dependsOn:
      - Release
    jobs:
      - job: 'prepare_artifact'
        steps:
          # Build application
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/master --> master
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}
          - script: |
              yarn predeploy
            displayName: 'Build'
          # Install functions extensions
          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              arguments: "-o bin"   
          # Copy application to  
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              TargetFolder: '$(System.DefaultWorkingDirectory)/bundle'
              Contents: |
                **/*
                !.git/**/*
                !**/*.js.map
                !**/*.ts
                !.vscode/**/*
                !.devops/**/*
                !.prettierrc
                !.gitignore
                !README.md
                !jest.config.js
                !local.settings.json
                !test
                !tsconfig.json
                !tslint.json
                !yarn.lock
                !Dangerfile.js
                !CODEOWNERS
                !__*/**/*
            displayName: 'Copy deploy files'
          
          - publish: $(System.DefaultWorkingDirectory)/bundle
            artifact: Bundle

  - stage: Deploy_to_UAT
    dependsOn:
      - Prepare_artifact
    jobs:
      - job: 'do_deploy'
        steps:
          - checkout: none
          - download: current
            artifact: Bundle
          - task: AzureFunctionApp@1  
            inputs:
              azureSubscription: '$(UAT_AZURE_SUBSCRIPTION)'
              resourceGroupName: 'pagopa-u-checkout-be-rg'
              appType: 'functionApp'
              appName: 'pagopa-u-fn-checkout'
              package: '$(Pipeline.Workspace)/Bundle'
              deploymentMethod: 'auto'
              deployToSlotOrASE: true
              slotName: 'production'
              displayName: Deploy to UAT

  - stage: API_Tests
    dependsOn:
      - Deploy_to_UAT
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: api_tests
        steps:
          - script: |
              yarn global add newman
            displayName: 'newman installation'
          - script: |
              newman run https://raw.githubusercontent.com/pagopa/pagopa-checkout-tests/main/api-tests/checkout-api.tests.json --environment=https://raw.githubusercontent.com/pagopa/pagopa-checkout-tests/main/api-tests/uat.envs.json --reporters cli,junit --reporter-junit-export Results/checkout-api-TEST.xml
            displayName: 'Run api test'
            continueOnError: true 
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/*-TEST.xml' 
              searchFolder: '$(System.DefaultWorkingDirectory)'

  - stage: UAT_to_PROD_promotion
    dependsOn:
      - Deploy_to_UAT
    jobs:
      - job: Deploy_PROD_WaitForApproval
        displayName: Wait for PROD approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 4320 # 3 days
          inputs:
            onTimeout: 'skip'

  - stage: Deploy_to_PROD
    # dependsOn:
      # - UAT_to_PROD_promotion
    jobs:
      - job: 'do_deploy'
        steps:
          - checkout: none
          - download: current
            artifact: Bundle
            
          - task: AzureFunctionApp@1  
            inputs:
              azureSubscription: '$(PROD_AZURE_SUBSCRIPTION)'
              resourceGroupName: 'pagopa-p-checkout-be-rg'
              appType: 'functionApp'
              appName: 'pagopa-p-fn-checkout'
              package: '$(Pipeline.Workspace)/Bundle'
              deploymentMethod: 'auto'
              deployToSlotOrASE: true
              slotName: 'production'
            displayName: Deploy to PROD
